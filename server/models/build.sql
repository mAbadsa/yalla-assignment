BEGIN;
DROP TABLE IF EXISTS users, articles, comments, user_coding, reading_list, likes, tags, article_tags CASCADE;

DROP TYPE IF EXISTS statuses;
CREATE TYPE statuses AS ENUM ('published', 'draft');

CREATE TABLE users (
	id SERIAL PRIMARY KEY,
	username VARCHAR(50),
	email VARCHAR(50) NOT NULL UNIQUE,
	password TEXT not null,
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE articles (
	id SERIAL PRIMARY KEY,
	title TEXT NOT NULL,
	slug TEXT NOT NULL,
	content TEXT NOT NULL,
	cover_image TEXT,
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE comments (
	id SERIAL PRIMARY KEY,
	contents VARCHAR(240) NOT NULL,
	user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	article_id INTEGER REFERENCES articles(id) ON DELETE CASCADE,
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  CHECK(
    COALESCE((article_id)::BOOLEAN::INTEGER,0)
    +
    COALESCE((user_id)::BOOLEAN::INTEGER,0)
    = 1
	)
);

CREATE TABLE ratings (
	id SERIAL PRIMARY KEY,
	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	article_id INTEGER REFERENCES articles(id) ON DELETE CASCADE,
	ratings_value INTEGER,
	UNIQUE(article_id, user_id)
);


COMMIT;
